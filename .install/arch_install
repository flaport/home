#!/usr/bin/env bash
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/

# ---------------------------------------------------- #
# !!! NOTE THAT THIS SCRIPT SHOULD NOT BE SOURCED. !!! #
# ---------------------------------------------------- #

# last complete install: 2021.10.21

# Note: this script can be run as often as you like. It will not attempt to re-install
#       any already installed program, making it a very fast way update some preferences
#       or install additional packages by adding them to the list below.


# Pre-installation checks
#-------------------------------------------------------------------------------

if [ "$USER" == root ]; then
    echo
    echo "'arch_install' should NOT be run as root, nor should it be run with sudo."
    echo "this script should be run [normally] by a user with sudo privileges."
    exit 1
fi

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo
    echo "'arch_install' should NOT be sourced."
    exit 1
fi


# Parse arguments
#-------------------------------------------------------------------------------

[ ! -z "$2" ] && >&2 echo usage: arch_install [--force] && exit 1
[ ! -z "$1" ] && [  "$1" = "--force" ] && FORCE=1 || FORCE=0


# Logging
#-------------------------------------------------------------------------------

mkdir -p $HOME/.local/share
LOG="$HOME/.local/share/arch_install.log"
ERR="$HOME/.local/share/arch_install_errors.log"
printf "ARCH PACKAGE INSTALL\n\n\n" > "$LOG"
printf "ARCH PACKAGE INSTALL\n\n\n" > "$ERR"


# User input
#-------------------------------------------------------------------------------

# Ask for password, this will be used for all the sudo calls.:
# and to change the shell later on.
read -s -p "[sudo] password for $USER: " password
echo $password | sudo -S echo '' 2>/dev/null
if [ $? -ne 0 ]; then
    printf "\nIncorrect sudo password. Script ended prematurely.\n\nPlease start over.\n\n"
    exit 1
fi


# Update
#-------------------------------------------------------------------------------

## Update arch
printf "\n\nUpdating Arch Linux...\n\n"
printf "\n\nUpdating Arch Linux...\n\n" >> "$LOG"
printf "\n\nUpdating Arch Linux...\n\n" >> "$ERR"
echo $password | sudo -S pacman -Syu --noconfirm >> "$LOG" 2>> "$ERR"


# Custom installation functions
#-------------------------------------------------------------------------------

echo_success(){
    if [ $1 -ne 0 ]; then
        printf "failed!\n"
        printf "\nfailed!\n" >> "$LOG"
        printf "\nfailed!\n" >> "$ERR"
        return 1
    fi

    printf "success!\n"
    printf "\nsuccess!\n" >> "$LOG"
    printf "\nsuccess!\n" >> "$ERR"
    return 0
}

pacman_install(){ # will only install the first argument!
    printf "[pacman] install $1... "
    printf "\n\n\n[pacman] install $1...\n" >> "$LOG"
    printf "\n\n\n[pacman] install $1...\n" >> "$ERR"

    # check if package is already installed...
    echo $password | sudo -S pacman -Q $1 >> "$LOG" 2>> "$ERR";
    if [ $? = 0 ] && [ "$FORCE" -eq 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> "$LOG"
        printf "already installed.\n" >> "$ERR"
        return 1
    fi

    printf "sudo pacman -S --noconfirm --noprogress $1\n" >> "$LOG"
    printf "sudo pacman -S --noconfirm --noprogress $1\n" >> "$ERR"
    echo $password | sudo -S pacman -S --noconfirm --noprogress --overwrite='*' $1 >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

yay_install(){ # will only install the first argument!
    printf "[ yay  ] install $1... "
    printf "\n\n\n[ yay  ] install $1...\n" >> "$LOG"
    printf "\n\n\n[ yay  ] install $1...\n" >> "$ERR"

    # check if package is already installed...
    echo $password | sudo -S pacman -Q $1 >> "$LOG" 2>> "$ERR";
    if [ $? = 0 ] && [ "$FORCE" -eq 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> "$LOG"
        printf "already installed.\n" >> "$ERR"
        return 1
    fi

    printf "yay -S -q --noconfirm $1\n" >> "$LOG"
    printf "yay -S -q --noconfirm $1\n" >> "$ERR"
    yay -S -q --noconfirm --overwrite='*' $1 >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

git_install(){ # will only install the first argument!
    name=$(basename $1)
    name=${name%.*}

    printf "[ git  ] install $name... "
    printf "\n\n\n[ git  ] install $name...\n" >> "$LOG"
    printf "\n\n\n[ git  ] install $name...\n" >> "$ERR"

    # check if package is already installed...
    echo $password | sudo -S pacman -Q $name >> "$LOG" 2>> "$ERR";
    if [ $? = 0 ] && [ "$FORCE" -eq 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> "$LOG"
        printf "already installed.\n" >> "$ERR"
        return 1
    fi

    printf "git clone $1 /tmp/gitpkg\n" >> "$LOG"
    printf "git clone $1 /tmp/gitpkg\n" >> "$ERR"
    git clone $1 /tmp/gitpkg >> "$LOG" 2>> "$ERR"

    printf "cd /tmp/gitpkg\n" >> "$LOG"
    printf "cd /tmp/gitpkg\n" >> "$ERR"
    cd /tmp/gitpkg >> "$LOG" 2>> "$ERR"

    printf "makepkg -si --noconfirm --noprogress\n" >> "$LOG"
    printf "makepkg -si --noconfirm --noprogress\n" >> "$ERR"
    makepkg -si --noconfirm --noprogress >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code

    printf "cd ~\n" >> "$LOG"
    printf "cd ~\n" >> "$ERR"
    cd $HOME >> "$LOG" 2>> "$ERR"

    printf "rm -rf /tmp/gitpkg\n" >> "$LOG"
    printf "rm -rf /tmp/gitpkg\n" >> "$ERR"
    rm -rf /tmp/gitpkg >> "$LOG" 2>> "$ERR"

    return $exit_code
}

submodule_install(){ # will only install the first argument!
    printf "[submod] install $1... "
    printf "\n\n\n[submod] install $1...\n" >> "$LOG"
    printf "\n\n\n[submod] install $1...\n" >> "$ERR"

    printf "cd $HOME/.build/$1\n" >> "$LOG"
    printf "cd $HOME/.build/$1\n" >> "$ERR"
    cd "$HOME/.build/$1" >> "$LOG" 2>> "$ERR"

    printf "sudo make clean\n" >> "$LOG"
    printf "sudo make clean\n" >> "$ERR"
    echo $password | sudo -S rm config.h >> "$LOG" 2>> "$ERR"
    echo $password | sudo -S make clean >> "$LOG" 2>> "$ERR"

    printf "git pull\n" >> "$LOG"
    printf "git pull\n" >> "$ERR"
    git checkout master >> "$LOG" 2>> "$ERR"
    git pull origin master >> "$LOG" 2>> "$ERR"

    printf "sudo make install\n" >> "$LOG"
    printf "sudo make install\n" >> "$ERR"
    echo $password | sudo -S make all >> "$LOG" 2>> "$ERR"
    echo $password | sudo -S make install >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code
    echo $password | sudo -S make clean >> "$LOG" 2>> "$ERR"
    echo $password | rm -f config.h >> "$LOG" 2>> "$ERR"

    printf "cd $HOME\n" >> "$LOG"
    printf "cd $HOME\n" >> "$ERR"
    cd $HOME >> "$LOG" 2>> "$ERR"

    return $exit_code
}

pip3_install() {
    printf "[ pip3 ] install $1... "
    printf "\n\n\n[ pip3 ] install $1\n" >> "$LOG"
    printf "\n\n\n[ pip3 ] install $1\n" >> "$ERR"

    # check if package is already installed...
    /usr/bin/python3 -c "import $1" >/dev/null 2>/dev/null
    if [ $? = 0 ] && [ "$FORCE" -eq 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> "$LOG"
        printf "already installed.\n" >> "$ERR"
        return 1
    fi

    printf "sudo /usr/bin/python3 -m pip install $1\n" >> "$LOG"
    printf "sudo /usr/bin/python3 -m pip install $1\n" >> "$ERR"
    echo $password | sudo -S /usr/bin/python3 -m pip install $1 >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

pip2_install() {
    printf "[ pip2 ] install $1... "
    printf "\n\n\n[ pip2 ] install $1\n" >> "$LOG"
    printf "\n\n\n[ pip2 ] install $1\n" >> "$ERR"

    # check if package is already installed...
    /usr/bin/python2 -c "import $1" >/dev/null 2>/dev/null
    if [ $? = 0 ] && [ "$FORCE" -eq 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> "$LOG"
        printf "already installed.\n" >> "$ERR"
        return 1
    fi

    printf "sudo /usr/bin/python2 -m pip install $1\n" >> "$LOG"
    printf "sudo /usr/bin/python2 -m pip install $1\n" >> "$ERR"
    echo $password | sudo -S /usr/bin/python2 -m pip install $1 >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

npm_install(){
    printf "[ npm  ] install $1... "
    printf "\n\n\n[ npm  ] install $1\n" >> "$LOG"
    printf "\n\n\n[ npm  ] install $1\n" >> "$ERR"

    # check if package is already installed...
    echo $password | sudo -S npm list -g 2> /dev/null | grep "$1" >/dev/null 2>/dev/null
    if [ $? = 0 ] && [ "$FORCE" -eq 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> "$LOG"
        printf "already installed.\n" >> "$ERR"
        return 1
    fi

    printf "sudo npm install -g $1\n" >> "$LOG"
    printf "sudo npm install -g $1\n" >> "$ERR"
    echo $password | sudo -S npm install -g $1 >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

systemctl_create() {
    printf "[system] create $1 service... "
    printf "\n\n\n[system] create $1 service...\n" >> "$LOG"
    printf "\n\n\n[system] create $1 service...\n" >> "$ERR"
    source=$HOME/.install/services/$1.service
    target=$(head -6 $source | tail -1 | sed 's/#\ *TARGET:\ *//g')

    echo $password | sudo -S systemctl daemon-reload
    echo "# NOTE: THIS FILE WAS AUTO-GENERATED BY $HOME/.install/arch_install" | sudo tee $target > /dev/null 2>> "$ERR"
    echo "# AND WILL PROBABLY BE OVERWRITTEN IN THE FUTURE." | sudo tee -a $target > /dev/null 2>> "$ERR"
    echo "# EDIT THE SOURCE FILE AT $source" | sudo tee -a $target > /dev/null 2>> "$ERR"
    echo "# and run $HOME/.install/arch_install again to install it here." | sudo tee -a $target > /dev/null 2>> "$ERR"
    echo "" | sudo tee -a $target > /dev/null 2>> "$ERR"
    tail --lines=+7 $source | sed 's|{USER}|'$USER'|g' | sed 's|{HOME}|'$HOME'|g' | sudo tee -a $target > /dev/null 2>> "$ERR"
    exit_code=$?
    echo $password | sudo -S systemctl daemon-reload
    echo_success $exit_code
    return $exit_code
}

systemctl_enable() {
    printf "[system] enable $1 service... "
    printf "\n\n\n[system] enable $1 service...\n" >> "$LOG"
    printf "\n\n\n[system] enable $1 service...\n" >> "$ERR"
    printf "sudo systemctl enable $1\n" >> "$LOG"
    printf "sudo systemctl enable $1\n" >> "$ERR"
    echo $password | sudo -S systemctl enable "$1" >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

link() {
    [ ! -z $3 ] && printf "link: too many arguments" && return 1
    printf "[ link ] from $1 to $2... "
    printf "\n\n\n[ link ] from $1 to $2\n" >> "$LOG"
    printf "\n\n\n[ link ] from $1 to $2\n" >> "$ERR"
    printf "sudo ln -sf $1 $2\n" >> "$LOG"
    printf "sudo ln -sf $1 $2\n" >> "$ERR"
    [ -f "$2" ] && echo $password | sudo -S mv $2 $2.bak  >> "$LOG" 2>> "$ERR"
    echo $password | sudo -S ln -sf $1 $2  >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

pacman_enable_archlinuxcn(){ # add archlinuxcn to the pacman repositories
    printf "[pacman] enable archlinuxcn"
    printf "\n\n\n[pacman] enable archlinuxcn\n" >> "$LOG"
    printf "\n\n\n[pacman] enable archlinuxcn\n" >> "$ERR"
    grep "\[archlinuxcn\]" /etc/pacman.conf &> /dev/null || printf "\n\n[archlinuxcn]\nServer=https://repo.archlinuxcn.org/\$arch" | sudo tee -a /etc/pacman.conf > /dev/null 2>> "$ERR"
    echo $password | sudo -S pacman -Syy >> "$LOG" 2>> "$ERR"
    pacman_install archlinuxcn-keyring
}

pacman_enable_multilib(){
    printf "[pacman] enable multilib"
    printf "\n\n\n[pacman] enable multilib\n" >> "$LOG"
    printf "\n\n\n[pacman] enable multilib\n" >> "$ERR"
    sudo sed -i 's|^#\[multilib\]|[multilib]\nInclude\ =\ /etc/pacman.d/mirrorlist|g' /etc/pacman.conf >> "$LOG" 2>> "$ERR"
    sudo sed -i 's|^#\[multilib-testing\]|[multilib-testing]\nInclude\ =\ /etc/pacman.d/mirrorlist|g' /etc/pacman.conf >> "$LOG" 2>> "$ERR"
    echo $password | sudo -S pacman -Syy >> "$LOG" 2>> "$ERR"
}


# Linux kernels
#-------------------------------------------------------------------------------

## switch to bleeding edge linux kernel (this is what I use)
#pacman_install linux
## switch to long term support linux kernel
#pacman_install linux-lts
## switch to hardened (safer) linux kernel
#pacman_install linux-hardened
## switch to zen kernel
#pacman_install linux-zen
## always generate grub entries after installing new kernels:
#echo $password | sudo -S grub-mkconfig -o /boot/grub/grub.cfg


# Build tools
#-------------------------------------------------------------------------------

pacman_install make
pacman_install cmake


# Git
#-------------------------------------------------------------------------------

pacman_install git
pacman_install git-lfs
git config pull.rebase false
git config push.default simple
git config advice.addIgnoredFile false
git submodule update --init --recursive


# Alternative package managers
#-------------------------------------------------------------------------------

## yay (AUR helper)
git_install https://aur.archlinux.org/yay.git
## npm (node package manager)
pacman_install npm
#pip (python package manager)
#pacman_install python-pip
#pacman_install python2-pip


# Terminal: tools and TUIs
#-------------------------------------------------------------------------------

## eyecandy: patch pacman config to enable Color and ILoveCandy
echo $password | sudo -S sed -i 's|^#Color|Color\nILoveCandy|g' /etc/pacman.conf >> "$LOG" 2>> "$ERR"
## disable tty tickets (giving sudo password in one terminal enables passwordless sudo in other terminals as well for 15 min)
echo Defaults:$USER '!tty_tickets', timestamp_timeout=15 | sudo tee /etc/sudoers.d/tty_tickets
## install scripts for bootstrapping new arch installations
#pacman_install arch-install-scripts
## alacritty: arguably the best terminal
pacman_install alacritty
## calcurse: a terminal calendar client
#pacman_install calcurse
## vdirsyncer: synchronize caldav and carddav
#pacman_install vdirsyncer
## khal: calendar command line utility for caldav sync
#pacman_install khal
## search tool
pacman_install grep
## download tool
pacman_install curl
## alternative download tool (youtube-dl dependency)
pacman_install wget
## alternative search tool
#pacman_install ripgrep
## alternative search tool
#pacman_install ack
## fuzzy finder tool
pacman_install fzf
## rsync: safe and secure copy & backup
pacman_install rsync
## atool gives information about archives
#pacman_install atool
## glu: opengl binaries
pacman_install glu
## zip
pacman_install zip
## unzip
pacman_install unzip
## unrar
pacman_install unrar
## universal unarchiver (executable: unar)
pacman_install unarchiver
## rpm extraction shell script
#yay_install rpmextract
## pv: progress bars on stdout
#pacman_install pv
## battery information
#pacman_install acpi
## battery daemon (sleep on low power):
#pacman_install acpid
#systemctl_enable acpid
## vifm: terminal file browser
#pacman_install vifm
## dos2unix: tool to change carriage return (^M | \r) into nomal return (\n)
#pacman_install dos2unix
## terminal multiplexer:
pacman_install tmux
## run tmux as a systemd service:
systemctl_create tmux
systemctl_enable tmux
## program manuals
pacman_install man
pacman_install man-db
pacman_install man-pages
pacman_install texinfo
## very useful alternative to man: show most common commands for executable
pacman_install tldr
## unit conversions
#pacman_install units
## terminal music player: mplayer
#pacman_install mplayer
## copying and pasting from the terminal
pacman_install xclip
## pdf conversion
pacman_install poppler
## video to thumbnail conversion
pacman_install ffmpegthumbnailer
## audio thumbnails with ffmpeg (heh?)
#yay_install ffmpegthumbnailer-mp3
## epub thumbnailer
#yay_install epub-thumbnailer-git
## font previewer
#yay_install fontpreview-git
## check if bash script is posix complient (needs haskell -> 250mb -> disabled by default)
#pacman_install shellcheck
## shell formatter
#pacman_install shfmt
## highlight: to highlight code in the terminal (nice `cat` alternative, used in my custom scripts)
pacman_install highlight
## mediainfo: show audio and video information in terminal
#pacman_install mediainfo
## process information
pacman_install htop
## termdown: terminal timer/stopwatch
#pacman_install termdown
## espeak: text to speach engine (used in my custom termdown script)
#pacman_install espeak
## aplay: simple sound player based on alsa
#yay_install alsaplayer-git
## system information
pacman_install neofetch
## lightweight system information
#yay_install pfetch
## some more eye-candy (useless music visualizer):
#yay_install cli-visualizer-git
## large ascii letters
#pacman_install figlet
## task spooler: queue tasks
#pacman_install task-spooler
## netcat: for socket communication
#pacman_install gnu-netcat
## sockets (needed for custom mpvcontrol script)
pacman_install socat
## torrents: transmission cli
pacman_install transmission-cli
## transmission remote cli curses interface:
yay_install tremc-git
## transmission remote cli gtk interface
#pacman_install transmission-remote-gtk
## add current user to the transmission group:
echo $password | sudo -S usermod -a -G transmission $USER
## make the system transmission config writable by current user:
echo $password | sudo -S chmod -R g+rw /var/lib/transmission
## a more beautiful ls command (I have ls remapped to lsd when no arguments given)
pacman_install lsd
## vim / neovim: terminal text editor
pacman_install neovim
## link neovim to standard vim binary:
link /usr/bin/nvim /usr/bin/vim
link /usr/bin/nvim /usr/bin/vi
## pynvim: better integration of python with neovim:
pacman_install python-pynvim
## neovim-remote: some of my nvim scripts depend on it
yay_install neovim-remote
pacman_install python-pynvim
## ruby-neovim: better integration of ruby with neovim:
#yay_install ruby-neovim
## node-neovim: better integration of nodejs with neovim:
#npm_install neovim
## vimwiki-markdown: better integration for mardown files in vimwiki:
#pip3_install vimwiki-markdown
## instant-markdown-d used for instant markdown visualization in vim
#npm_install instant-markdown-d
## pyright: static typechecker and linter for python
npm_install pyright
## ccls: C language server (required by CoC plugin for nvim)
pacman_install ccls
## bash language server (required by CoC plugin for nvim)
pacman_install bash-language-server
## eslint: javascript linter (required by COC plugin for nvim)
pacman_install eslint
## ctags: recommended vim dependency for jump-to-tag functionality
pacman_install ctags
## tidy: html formatter
pacman_install tidy
## prettier: universal formatter
pacman_install prettier
## scim: terminal spreadsheet viewer/editor
#yay_install sc-im
## wordgrinder: terminal word processor
#yay_install wordgrinder
## terminal internet search: google
#yay_install googler
## terminal internet search: duckduckgo
#yay_install ddgr
## newsboat: RSS reader
#pacman_install newsboat
## ueberzug: image overlays in the terminal
pacman_install ueberzug
## trans: command line translation engine
#pacman_install translate-shell
## whois information
#pacman_install whois
## cronie: cron job daemon
#pacman_install cronie
## (pixelated) terminal image previews
yay_install viu
#systemctl_enable cronie
## ncmpcpp: terminal music client
#pacman_install ncmpcpp
## spotify-tui: terminal client for spotify (building this takes LONG)
#yay_install spotify-tui
## spotify daemon (dependency for spotify-tui)
#pacman_install spotifyd
## playerctl: terminal client to control spotify, spotifyd, vlc, ...
pacman_install playerctl
## media daemon
#pacman_install mpd
#systemctl_enable mpd
## media control
#pacman_install mpc
## service that checks number of packages that need updating:
systemctl_create pacmanquery
systemctl_enable pacmanquery


# Drive and file system drivers
#-------------------------------------------------------------------------------

## mount cifs parititions
pacman_install cifs-utils
## dosfstools: support for dos (windows) - like filesystems
pacman_install dosfstools
## exfat-utils: access fat-drives
pacman_install exfat-utils
## ntfs-3g: access NTFS network drives
pacman_install ntfs-3g
## samba shares = network volumes
pacman_install samba
## access media on external device (phone, ...)
pacman_install libmtp
pacman_install fuse
pacman_install android-file-transfer # android access
## access ssh file system
pacman_install sshfs
## access mac-formatted drives (HFS+)
# yay_install hfsprogs
## testdisk to figure out location HFS+ partition wrapped in 'Apple Core Storage':
pacman_install testdisk
## data-at-rest tool: easy-to-use stacked filesystem encryption tool
pacman_install gocryptfs
## webdav filesystem (mount Nextcloud as a folder)
pacman_install davfs2
## recommended settings for davfs2 + Nextcloud
echo $password | sudo -S sed -i 's/# use_locks.*/use_locks 0/g' /etc/davfs2/davfs2.conf


# Graphical desktop server: xorg
#-------------------------------------------------------------------------------

## install everything from xorg:
#pacman_install xorg
## install just the graphical server
pacman_install xorg-server
## install the xorg server development packages
#pacman_install xorg-server-devel
## initializing (for starting the window manager without display manager)
pacman_install xorg-xinit
## querying window information
#pacman_install xorg-xwininfo
## tool for detecting window properties
pacman_install xorg-xprop
## tool for showing x event names
pacman_install xorg-xev
## get info on current active windows
#pacman_install xorg-xdpyinfo
## special libinput fork to enable three finger dragging
#yay_install libinput-three-finger-drag
## enable tap-to-click on some touchpads (probably a manual install works better):
# grep 'Option "Tapping" "on"' /usr/share/X11/xorg.conf.d/40-libinput.conf &> /dev/null || echo $password | sudo -S sed -i 's|^\([^M]*\)\(MatchIsTouchpad.*\)|\1\2\n\1Option "Tapping" "on"|g' /usr/share/X11/xorg.conf.d/40-libinput.conf
## virtual x server
pacman_install xorg-server-xvfb
## hide an inactive mouse
pacman_install unclutter
## dependency for my st fork to find urls in terminal:
yay_install xurls
## remap escape key:
#yay_install xcape-git
## emulate mouse clicks and keyboard presses
pacman_install xdotool
## emulate mouse clicks and more from within python
yay_install python-pyautogui
## xsettingsd: immediately apply changes in GTK theme
pacman_install xsettingsd
## server access control for x
pacman_install xorg-xhost
## sharing and viewing x-sessions on other computers
#pacman_install x11vnc
## create x11vnc systemd service:
#systemctl_create x11vnc
## view x11vnc session (executable: gvncviewer)
#pacman_install gtk-vnc
## view x11vnc session (executable: vncviewer) <-- better framerate
#pacman_install tigervnc
## view x11vnc and realvnc sessions (executable: vncviewer)
#yay_install realvnc-vnc-viewer
## compositor (for transparent windows, blur, ...)
#pacman_install xcompmgr
## better compositor:
#pacman_install picom
## bleeding edge version of picom:
#yay_install picom-git

## libxft-bgra; alternative to libxft, helper library for color emojis in my st build:
## the reason it is installed this way is because this library replaces libxft
## requiring you to answer yes on a [y/N] question...
pacman -Q libxft-bgra-git &> /dev/null || yes | LC_ALL=en_US.UTF-8 yay -S -q libxft-bgra-git >> "$LOG" 2>> "$ERR"

## Dell displaylink drivers:
#pacman_install linux-headers
#yay_install evdi-git
#yay_install evdi
#yay_install displaylink
#yay_install displaylink-beta
#systemctl_enable displaylink
#printf "Section \"OutputClass\"\n  Identifier \"DisplayLink\"\n  MatchDriver \"evdi\"\n  Driver \"modesetting\"\n  Option \"AccelMethod\" \"none\"\nEndSection" | sudo tee /usr/share/X11/xorg.conf.d/20-evdidevice.conf > /dev/null 2>> "$ERR"
#printf "Section \"Device\"\n  Identifier \"DisplayLink\"\n  Driver \"modesetting\"\n  Option \"PageFlip\" \"false\"\nEndSection" | sudo tee /usr/share/X11/xorg.conf.d/21-displaylink.conf > /dev/null 2>> "$ERR"
#yay_install rsyslog
#printf ":msg,contains,"drm_wait_vblank" /var/log/displaylink.err\n&stop" | sudo tee /etc/rsyslog.d/30-displaylink.conf > /dev/null 2>> "$ERR"
#systemctl_enable rsyslog


# Desktop Environment / Window Manager
#-------------------------------------------------------------------------------

## i3lock: screen lock for i3 and other window managers like in this case dwm.
pacman_install i3lock
## xsetroot: for status bar in dwm
pacman_install xorg-xsetroot
## sxhkd: keyboard shortcuts daemon
pacman_install sxhkd
## light: CLI utility to change backlight value of laptops
pacman_install light
## allow only users in video group to make changes to backlight
groupadd video >> "$LOG" 2>> "$ERR"
echo $password | sudo -S usermod -a -G video $USER
echo "ACTION==\"add\", SUBSYSTEM==\"backlight\", KERNEL==\"intel_backlight\", RUN+=\"/bin/chgrp video /sys/class/backlight/%k/brightness\"" | sudo tee /etc/udev/rules.d/backlight.rules > /dev/null 2>> "$ERR"
echo "ACTION==\"add\", SUBSYSTEM==\"backlight\", KERNEL==\"intel_backlight\", RUN+=\"/bin/chmod g+w /sys/class/backlight/%k/brightness\"" | sudo tee -a /etc/udev/rules.d/backlight.rules > /dev/null 2>> "$ERR"
## xautolock to automatically lock the screen
pacman_install xautolock
## wallpapers
pacman_install feh
## moving wallpapers
#git clone https://github.com/glouw/paperview /tmp/paperview >"$LOG" 2>"$ERR"; cd /tmp/paperview >"$LOG" 2>"$ERR"; make >"$LOG" 2>"$ERR"; mv paperview ~/.local/bin >"$LOG" 2>"$ERR"; mv scenes ~/.local/share >"$LOG" 2>"$ERR"; cd ~; rm -rf /tmp/paperview
## dependency for moving wallpapers
#pacman_install sdl2
## rofi (dmenu alternative)
#pacman_install rofi
## albert (dmenu alternative)
#pacman_install albert
## xmenu (application launcher)
#yay_install xmenu
## conky: a system monitor
#pacman_install conky
## display manager
pacman_install lightdm
##pacman_install lightdm-gtk-greeter
##yay_install lightdm-slick-greeter
yay_install lightdm-mini-greeter
echo $password | sudo -S mkdir -p /usr/share/xsessions
echo $password | sudo -S cp -f $HOME/.local/share/applications/dwm.desktop /usr/share/xsessions/
echo $password | sudo -S sed -i "s/\(#\)\?.*greeter-session.*=.*/greeter-session=lightdm-mini-greeter/g" /etc/lightdm/lightdm.conf >> "$LOG" 2>> "$ERR"
echo $password | sudo -S sed -i "s/\(#\)\?.*user-session.*=.*/user-session=dwm/g" /etc/lightdm/lightdm.conf >> "$LOG" 2>> "$ERR"
echo $password | sudo -S sed -i "s/^user.*=.*/user = $USER/g" /etc/lightdm/lightdm-mini-greeter.conf >> "$LOG" 2>> "$ERR"
echo $password | sudo -S sed -i "s/^show-password-label.*=.*/show-password-label = false/g" /etc/lightdm/lightdm-mini-greeter.conf >> "$LOG" 2>> "$ERR"
echo $password | sudo -S sed -i "s/^password-label-text.*=.*/password-label-text = $USER:/g" /etc/lightdm/lightdm-mini-greeter.conf >> "$LOG" 2>> "$ERR"
echo $password | sudo -S sed -i "s|^background-image.*=.*|background-image=\"$HOME/.cache/current-wallpaper\"|g" /etc/lightdm/lightdm-mini-greeter.conf >> "$LOG" 2>> "$ERR"
echo $password | sudo -S sed -i "s/F92672/2AA198/g" /etc/lightdm/lightdm-mini-greeter.conf >> "$LOG" 2>> "$ERR"
systemctl_enable lightdm
## maybe you just want autologin instead of a display manager:
#systemctl_create getty-auto-login


# Desktop notifications
#-------------------------------------------------------------------------------

## libnotify allows desktop notifications
pacman_install libnotify
## dunst creates desktop notifications
pacman_install dunst


# Windows compatibility & gaming
#-------------------------------------------------------------------------------

## patch pacman settings to include multilib
#pacman_enable_multilib
## wine-staging (better version of wine):
#pacman_install wine-staging
## wine (worse vorsion of wine)
#pacman_install wine
## winetricks: install dependencies and so on
#pacman_install winetricks
## gecko driver for wine (for programs relying on IE)
#pacman_install wine-gecko
## mono driver for wine
#pacman_install wine-mono
## better game support on linux
#pacman_install lutris
## steam game store
#pacman_install steam
## vulkan drivers
#pacman_install vulkan-intel
## playonlinux programs
#pacman_install playonlinux
## potentially useful audio drivers
#pacman_install alsa-plugins
#pacman_install lib32-alsa-plugins
#pacman_install alsa-lib
#pacman_install lib32-alsa-lib
#pacman_install libpulse
#pacman_install lib32-libpulse
## other potentially useful drivers:
#pacman_install mpg123
#pacman_install lib32-mpg123
#pacman_install giflib
#pacman_install lib32-giflib
#pacman_install libpng
#pacman_install lib32-libpng
#pacman_install gnutls
#pacman_install lib32-gnutls
#pacman_install gst-plugins-base
#pacman_install lib32-gst-plugins-base
#pacman_install gst-plugins-good
#pacman_install lib32-gst-plugins-good
#pacman_install openal
#pacman_install lib32-openal
#pacman_install libgl
#pacman_install lib32-libgl
## if you're using the nvidia driver:
#pacman_install nvidia-utils
#pacman_install lib32-nvidia-utils


# Sound
#-------------------------------------------------------------------------------

## alsamixer
pacman_install alsa-utils
## other alsa plugins
pacman_install alsa-plugins
## pulse audio
pacman_install pulseaudio


# Connectivity and network
#-------------------------------------------------------------------------------

## network manager
pacman_install networkmanager
systemctl_enable NetworkManager
## use cloudflare DNS servers:
printf "[global-dns-domain-*]\nservers=1.1.1.1,1.0.0.1" | sudo tee /etc/NetworkManager/conf.d/dns-servers.conf > /dev/null 2>> "$ERR"
## create network group (this might fail if the group exists already, but who cares.)
groupadd network >> "$LOG" 2>> "$ERR"
## create policy kit rule (everyone in network group can connect to / change networks)
printf "polkit.addRule(function(action, subject) {\n  if (action.id.indexOf(\"org.freedesktop.NetworkManager.\") == 0 && subject.isInGroup(\"network\")) {\n    return polkit.Result.YES;\n  }\n});" | sudo tee /etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules > /dev/null 2>> "$ERR"
## add current user to network group
echo $password | sudo -S usermod -a -G network $USER
## applet in the corner of the screen
pacman_install network-manager-applet
## vpn: openconnect (cisco anyconnect)
pacman_install openconnect
## vpn: openvpn
pacman_install openvpn
## openvpn plugin for networkmanager
pacman_install networkmanager-openvpn
## openvpn service that can be run in the background
systemctl_create openvpn
#systemctl_enable openvpn
## ssh (client and server)
pacman_install openssh
## mosh (ssh client for connections with high latency)
pacman_install mosh
## allow X-forwarding for sshd:
echo $password | sudo -S sed -i 's|^.*X11Forwarding.*|X11Forwarding yes|g' /etc/ssh/sshd_config >> "$LOG" 2>> "$ERR"
systemctl_enable sshd
## autossh (for ssh daemons)
pacman_install autossh
## access to google servers
#yay_install google-cloud-sdk
## bluetooth
pacman_install bluez
pacman_install bluez-utils
pacman_install pulseaudio-bluetooth
## enable bluetooth service
systemctl_enable bluetooth
## remote desktop
pacman_install remmina
## add windows remote desktop protocol to remmina
pacman_install freerdp
## barrier: seemless mouse and keyboard sharing between computers (takes a while to build)
pacman_install barrier
pacman_install barrier-headless


# Themes
#-------------------------------------------------------------------------------

## gtk3
pacman_install gtk3
## adwaita [inkscape dependency]
pacman_install gnome-themes-standard
## murrine theme [inkscape dependency]
pacman_install gtk-engine-murrine
## adapta theme
pacman_install adapta-gtk-theme
## arc theme
pacman_install arc-gtk-theme
## dark gruvbox-inspired arc theme (default theme for now)
yay_install gtk-theme-arc-gruvbox-git
## dark nord-inspired color theme
yay_install nordic-theme-git
## light nord-inspired color theme
#yay_install nordic-polar-theme-git
## lxappearance: tool to choose gtk themes
pacman_install lxappearance
## gtk look-and-feel for qt (comes with kvantummanager = lxappearance for qt apps):
pacman_install kvantum-qt5
## needed to enable kvantum:
pacman_install qt5ct
## nord color theme for kvantum:
yay_install kvantum-theme-nordic-git
## manjaro cursor theme
#yay_install xcursor-menda-git
#yay_install xcursor-maia-git
## red-had cursor theme
#pacman_install xcursor-bluecurve
## comix cursor theme
#pacman_install xcursor-comix
## flatbed cursor theme
#pacman_install xcursor-flatbed
## neutral cursor theme
#pacman_install xcursor-neutral
## simple and soft cursor theme
pacman_install xcursor-simpleandsoft


# Web and web interfaces
#-------------------------------------------------------------------------------

## syncthing: synchronization between devices
#pacman_install syncthing
## run syncthing as a systemd service
systemctl_create syncthing
#systemctl_enable syncthing
## jellyfin: media center
#yay_install jellyfin
#systemctl_enable jellyfin
## nextcloud: your own dropbox at home :-)
#pacman_install nextcloud-client
## libgnome-keyring: necessary dependency for nextcloud client so it can remember your password
#pacman_install libgnome-keyring
## override the default general nextcloud settings
#[ -f $HOME/.config/Nextcloud/nextcloud.cfg ] || cp $HOME/.config/Nextcloud/nextcloud.general.cfg $HOME/.config/Nextcloud/nextcloud.cfg
## nextcloud server (this needs quite a bit of manual configuration):
#pacman_install nextcloud
## nginx: reverse proxy
pacman_install nginx
echo $password | sudo -S mkdir -p /var/www/html
## patch nginx to increase types hash
grep types_hash_max_size /etc/nginx/nginx.conf &> /dev/null
[ $? -ne 0 ] && echo $password | sudo -S sed -i 's|http {.*|http {types_hash_max_size 4096;|g' /etc/nginx/nginx.conf
## patch nginx to look into /var/www/html by default
echo $password | sudo -S sed -i 's|root.*/usr/share/nginx/html;|root /var/www/html;|g' /etc/nginx/nginx.conf
echo $password | sudo -S cp /usr/share/nginx/html/50x.html /var/www/html/
if [ -f "$HOME/.extra/index.html" ]; then
    [ -f /var/www/html/index.html ] || echo $password | sudo -S cp $HOME/.extra/index.html /var/www/html/index.html
else
    [ -f /var/www/html/index.html ] || echo $password | sudo -S cp /usr/share/nginx/html/index.html /var/www/html/
fi
systemctl_enable nginx


# Printers
#-------------------------------------------------------------------------------

## printer system (cups @ localhost:631)
pacman_install cups
## common printer drivers
pacman_install gutenprint
## for network printing
pacman_install avahi
pacman_install nss-mdns
systemctl_enable avahi-daemon
## print to pdf
pacman_install cups-pdf
## enable cups service
systemctl_enable cups


# Fonts
#-------------------------------------------------------------------------------

# note: I block MANY fonts in ~/.config/fontconfig/conf.d/ I do this to have
#       better control over which fonts are used on my system.  However, this
#       means that installing a font might not automatically make it available.
#       You might need to remove the fontconfig block.

## fontconfig should already be installed, but just to be sure:
pacman_install fontconfig
## dejavu font: inkscape dependency (fully blocked by my fontconfig, replaced by Bitstream Vera):
pacman_install ttf-dejavu
## bitstream vera: alternative to dejavu (not blocked by my fontconfig, replaces DejaVu):
pacman_install ttf-bitstream-vera
## cantarell fonts: gtk3 dependency (fully blocked by my fontconfig):
pacman_install cantarell-fonts
## adobe fonts: nemo and other GNOME apps dependency (fully blocked by my fontconfig):
pacman_install adobe-source-code-pro-fonts
## liberation fonts: chromium, firefox and mplayer dependency (currently my default fonts):
pacman_install ttf-liberation
## ubuntu fonts: a beautiful mono and sans font
pacman_install ttf-ubuntu-font-family
## gnu free fonts: optional vlc dependency (partly blocked by my fontconfig):
#pacman_install gnu-free-fonts
## gnome core fontset (partly blocked by my fontconfig):
#pacman_install gsfonts
## a nice monospace font with ligatures (partly blocked by my fontconfig):
#pacman_install ttf-fira-code
## a patched fira code font with nerd font glyphs (partly blocked by my fontconfig):
#yay_install nerd-fonts-fira-code
## nice serif (Linux Libertine) and sans-serif (Linux Biolinum) fonts (not blocked by my fontconfig):
# pacman_install ttf-linux-libertine
## recommended font package for compatibility with MS Office (fully blocked and partly aliased by my fontconfig):
#yay_install ttf-ms-fonts
## recommended font package for compatibility with MS Office (fully blocked and partly aliased by my fontconfig):
#yay_install ttf-vista-fonts
## carlito: free font alternative to calibri
pacman_install ttf-carlito
## caladea: free font alternative to cambria
#pacman_install ttf-caladea
## alternative nice font package (partly blocked by my fontconfig):
#pacman_install ttf-droid
## yet another nice monospace font:
#yay_install ttf-inconsolata-g
## simplified chinese font (sans) which messes with korean symbols (fully blocked by my fontconfig):
#pacman_install wqy-microhei
## adobe simplified chinese fonts (sans):
pacman_install adobe-source-han-sans-cn-fonts
## adobe traditional chinese fonts (sans):
#pacman_install adobe-source-han-sans-tw-fonts
## adobe simplified chinese fonts (serif):
pacman_install adobe-source-han-serif-cn-fonts
## adobe traditional chinese fonts (serif):
#pacman_install adobe-source-han-serif-tw-fonts
## awesome terminal fonts: nice icons (lsd and dwm [my build] dependency):
pacman_install awesome-terminal-fonts
## powerline symbols: essential symbols for powerlines in zsh/bash/vim/...
#yay_install otf-powerline-symbols-git
## devicons: more symbols (used in lsd)
#yay_install ttf-devicons
## hack nerd fonts: patched font with nice icons (recommended for lsd):
yay_install nerd-fonts-hack
## Joypixels color emojis:
pacman_install ttf-joypixels
## google color emojis (blocked by my fontconfig):
#pacman_install noto-fonts-emoji
## black and white emojis and symbols (blocked by my fontconfig):
#yay_install ttf-symbola
## twitter black and white emojis (blocked by my fontconfig):
#yay_install ttf-twemoji
## twitter color emojis (blocked by my fontconfig):
#yay_install ttf-twemoji-color


# Graphical User Interfaces
#-------------------------------------------------------------------------------

## nemo: sometimes a non-terminal file browser can be useful
pacman_install nemo
## nemo settings: set default terminal to st:
gsettings set org.cinnamon.desktop.default-applications.terminal exec alacritty
gsettings set org.cinnamon.desktop.default-applications.terminal exec-arg -e
## nemo-terminal: show a small terminal window on top of the nemo windo
#pacman_install nemo-terminal
## screen settings: arandr (xrandr included)
pacman_install arandr
## best pdf reader: general document reader with vim bindings
pacman_install zathura
## pdf reader extension
pacman_install zathura-pdf-mupdf
## djvu reader extension
pacman_install zathura-djvu
## etcher: GUI dd alternative
#yay_install etcher-bin
## anki: a flashcard program
#pacman_install anki
## pulseaudio control panel
pacman_install pavucontrol
## bluetooth manager (run blueman-manager)
pacman_install blueman
## jami: blockchain-based secure chat app
#pacman_install jami-daemon
#pacman_install libjamiclient
#pacman_install jami-gnome
## 'airdrop' for linux (only works between pcs):
#yay_install warpinator
## natifier: make 'native' electron apps given a url
#npm_install nativefier
## dragon-drag-and-drop: drag files into applications (aliassed to 'd')
#yay_install dragon-drag-and-drop
## virtualbox dependency: linux headers
#pacman_install linux-headers
## virtualbox dependency: linux headers [for linux-lts kernel only!]
#pacman_install linux-lts-headers
## virtualbox: virtual machines
#pacman_install virtualbox
## virtualbox drivers [for linux kernel]:
#pacman_install virtualbox-host-modules-arch
## virtualbox drivers [for linux-lts and other kernels]:
#pacman_install virtualbox-host-dkms
## virtualbox guest additions (only necessary when running arch *inside* virtualbox)
#pacman_install virtualbox-guest-iso
## qemu: alternative virtual machine client
#pacman_install qemu
## ccid: usb smartcard reader drivers (dependency of eid-mw)
#pacman_install ccid
## acsccid: smartcard reader drivers (dependency of eid-mw)
#pacman_install acsccid
## pcsc-tools: pc smartcard tools (dependency of eid-mw)
#pacman_install pcsc-tools
## enable pcsd daemon
#systemctl_enable pcscd
## eid-mw: belgian e-id middleware
#yay_install eid-mw
## PyCharm Community Edition: python IDE
# pacman_install pycharm-community-edition
## PyCharm Professional: python IDE
#yay_install pycharm-professional
## Fix to make PyCharm work in most window managers (like my dwm fork)
#grep _JAVA_AWT_WM_NONREPARENTING /etc/environment &> /dev/null || echo "_JAVA_AWT_WM_NONREPARENTING=1" | sudo tee -a /etc/environment > /dev/null 2>> "$ERR"
## QT Whatsapp Web with tray Icon
#yay_install qtwaw



# Images, video and media (viewers and editors)
#-------------------------------------------------------------------------------

## pinta: an improved ms paint clone
#yay_install pinta
## inkscape
pacman_install inkscape
## GIMP: the GNU Image Manipulation program, a photoshop alternative
#pacman_install gimp
## Krita: another photoshop alternative.
#pacman_install krita
## image viewer
pacman_install sxiv
## imagemagick: for images, screenshots
pacman_install imagemagick
## scrot: alternative screenshot program [requires imagemagick]
#pacman_install scrot
## flameshot: arguably the best screenshot program
pacman_install flameshot
## youtube-dl: download YouTube videos
pacman_install youtube-dl
## YouTube-viewer
pacman_install youtube-viewer
## vlc media player
#pacman_install vlc
## mpv media player
pacman_install mpv
## ffmpeg command line tool
pacman_install ffmpeg
## spotify (I prefer spotifyd + spotify-tui)
#yay_install spotify
## GDS viewer and editor
#pacman_install klayout
## lbry: youtube alternative
#yay_install lbry-app-bin
## skype: video calls
#yay_install skypeforlinux-stable-bin
## microsoft teams: skype on steroids
#yay_install teams
## zoom: conference calls
#yay_install zoom
## jitsi meet: conference calls
#yay_install jitsi-meet-bin


# Office
#-------------------------------------------------------------------------------

## open-source office
pacman_install libreoffice-fresh
#pacman_install libreoffice-still
## open-source office with MS Office look-and-feel:
#yay_install onlyoffice-bin
## sqlite database browser
#pacman_install sqlitebrowser
## tex-live (disabled by default bc heavy package)
#pacman_install texlive-most
## bibliographies
pacman_install biber
## pandoc: convert document types into each other
#pacman_install pandoc
## pandoc as a single binary, without the haskell dependencies:
yay_install pandoc-bin
## open-source note taking app (takes a while to build)
#yay_install joplin


# Programming
#-------------------------------------------------------------------------------

## code OSS (open source build of vscode)
pacman_install code
if [ $? -eq 0 ]; then
    code --install-extension vscodevim.vim >> "$LOG" 2>> "$ERR"
    code --install-extension wholroyd.jinja >> "$LOG" 2>> "$ERR"
    code --install-extension ms-python.python >> "$LOG" 2>> "$ERR"
    code --install-extension james-yu.latex-workshop >> "$LOG" 2>> "$ERR"
    code --install-extension formulahendry.code-runner >> "$LOG" 2>> "$ERR"
    code --install-extension shardulm94.trailing-spaces >> "$LOG" 2>> "$ERR"
    code --install-extension pkief.material-icon-theme >> "$LOG" 2>> "$ERR"
fi
## Python programming language:
pacman_install python
pacman_install ipython
#pacman_install python2
#pacman_install ipython2

## Swift programming language:
#yay_install swift-bin
#yay_install swift-language-git

## Haskell programming language (glasgow haskell compiler):
#pacman_install ghc
#pacman_install ghc-static
#pacman_install stack
#pacman_install haskell-base-prelude

## Scientific computing with octave (Matlab alternative)
#pacman_install octave


# Browsers
#-------------------------------------------------------------------------------

## epiphany (gnome webbrowser)
pacman_install epiphany
## waterfox (like firefox, but better defaults)
#yay_install waterfox-current-bin
## firefox (like waterfox, but the original ;-) )
pacman_install firefox
## patch firefox and waterfox to work with some legacy extensions (like vimfx)
submodule_install legacyfox
## enhanced security settings for firefox (you might have to copy this manually if your profile is called differently)
#cp "$HOME/.mozilla/firefox/secure-prefs.js" "$(echo $HOME/.mozilla/firefox/*.default-release)/prefs.js"
#cp "$HOME/.mozilla/firefox/secure-prefs.js" "$(echo $HOME/.mozilla/firefox/*.default)/prefs.js"
## chromium
#pacman_install chromium
## ungoogled-chromium: the name says it all (note: compiling takes HOURS!):
#yay_install ungoogled-chromium
## alternatively: install ungoogled-chromium from archlinuxcn repositories:
#pacman_enable_archlinuxcn && pacman_install ungoogled-chromium

## vimb: vim-like browser
#pacman_install vimb
## qutebrowser: another vim-like browser
#pacman_install qutebrowser
## surf
#pacman_install webkit2gtk # surf build dependency
#pacman_install gcr # surf build dependency
#pacman_install xorg-xprop # surf build dependency
#pacman_install surf
## brave
#yay_install brave-bin


# Email
#-------------------------------------------------------------------------------

## awesome email client
pacman_install thunderbird
## send email
pacman_install msmtp
## mbsync: sync email (isync is the distribution, mbsync is the executable)
pacman_install isync
## mutt email client
pacman_install neomutt
link /usr/bin/neomutt /usr/bin/mutt
## notmuch: email indexing
pacman_install notmuch
## html email view (also browser!)
#pacman_install w3m
pacman_install lynx
## mutt wizard (disabled; manual configuration preferred)
#yay_install mutt-wizard
## Thunderbird: arguably the best email client for Linux (if a GUI is more your thing)
#pacman_install thunderbird
## mb2md: mailbox to maildir converter (convert thunderbird email storage to neomutt email storage)
#pacman_install mb2md


# Hardware acceleration
#-------------------------------------------------------------------------------

## general settings:
pacman_install libva-utils
pacman_install gstreamer-vaapi
pacman_install vdpauinfo
pacman_install intel-gpu-tools

## OPTION 0: do nothing

## OPTION 1: intel integrated graphics (recommended on most systems):
#pacman_install intel-media-driver
#pacman_install libvdpau-va-gl
#grep LIBVA_DRIVER_NAME /etc/environment &> /dev/null || echo "LIBVA_DRIVER_NAME=iHD" | sudo tee -a /etc/environment > /dev/null 2>> "$ERR"
#grep VDPAU_DRIVER /etc/environment &> /dev/null || echo "VDPAU_DRIVER=va_gl" | sudo tee -a /etc/environment > /dev/null 2>> "$ERR"

## OPTION 2: older intel integrated graphics:
#pacman_install libva-intel-driver  # OR: yay_install libva-intel-driver-g45-h264
#pacman_install libvdpau-va-gl
#grep LIBVA_DRIVER_NAME /etc/environment &> /dev/null || echo "LIBVA_DRIVER_NAME=i965" | sudo tee -a /etc/environment > /dev/null 2>> "$ERR"
#grep VDPAU_DRIVER /etc/environment &> /dev/null || echo "VDPAU_DRIVER=va_gl" | sudo tee -a /etc/environment > /dev/null 2>> "$ERR"

## OPTION 3: nvidia proprietary drivers and acceleration:
## nvidia driver (for linux kernel)
#pacman_install nvidia
## nvidia driver (for linux-lts kernel):
#pacman_install nvidia-lts
## other nvidia related packages:
#pacman_install nvidia-utils
#pacman_install nvtop
#pacman_install nvidia-settings
#pacman_install cuda
#pacman_install cudnn
#pacman_install opencl-nvidia
## configure nvidia with optimus-manager
#yay_install optimus-manager
#echo $password | sudo -S cp $HOME/.install/config/optimus-manager.conf /etc/optimus-manager/optimus-manager.conf
#systemctl_enable optimus-manager
#pacman_install libva-vdpau-driver # OR: yay_install libva-vdpau-driver-chromium
#grep LIBVA_DRIVER_NAME /etc/environment &> /dev/null || echo "LIBVA_DRIVER_NAME=vdpau" | sudo tee -a /etc/environment > /dev/null 2>> "$ERR"
#grep VDPAU_DRIVER /etc/environment &> /dev/null || echo "VDPAU_DRIVER=nvidia" | sudo tee -a /etc/environment > /dev/null 2>> "$ERR"
## force 96 dpi in Xorg when nvidia driver is in use:
#grep dpi /etc/X11/xinit/xserverrc &> /dev/null || echo $password | sudo -S sed -i 's|/usr/bin/X|/usr/bin/X -dpi 96|g' /etc/X11/xinit/xserverrc >> "$LOG" 2>> "$ERR"

## OPTION 4: open source nvidia-driver [nouveau]
#sudo pacman -Rns --noconfirm nvidia >> "$LOG" 2>> "$ERR"
#pacman_install libva-mesa-driver
#pacman_install mesa-vdpau
#yay_install nouveau-fw
#grep LIBVA_DRIVER_NAME /etc/environment &> /dev/null || echo "LIBVA_DRIVER_NAME=nouveau" | sudo tee -a /etc/environment > /dev/null 2>> "$ERR"
#grep VDPAU_DRIVER /etc/environment &> /dev/null || echo "VDPAU_DRIVER=nouveau" | sudo tee -a /etc/environment > /dev/null 2>> "$ERR"


# Resources
#-------------------------------------------------------------------------------

## a collection of very nice wallpapers:
if [ ! -d "$HOME/.local/share/wallpapers" ]; then
    echo "cloning a full repo of very nice wallpapers..."
    git clone https://gitlab.com/dwt1/wallpapers $HOME/.local/share/wallpapers >> "$LOG" 2>> "$ERR"
fi


# Personal builds and forks  (placed at the end so all dependencies are installed)
#-------------------------------------------------------------------------------

## my dwm fork [window manager]
submodule_install dwm
## my dmenu fork [application launcher]
submodule_install dmenu
## my st fork [terminal]
submodule_install st
## my scroll fork [scroll] (implements scrollback in st)
submodule_install scroll


# Python
#-------------------------------------------------------------------------------

## simple guis
pacman_install tk
## python style guide checker
pacman_install yapf
## python timezone info
pacman_install python-pytz
## progress bars
pacman_install python-tqdm
## numerical calculations
pacman_install python-numpy
## plotting
pacman_install python-matplotlib
## monitor DRM events from udev (used in my custom 'watch_screens' script)
pacman_install python-pyudev
## linters & formatters (recommended for vim)
pacman_install python-pylint
pacman_install autopep8
pacman_install flake8
pacman_install python-pyflakes
pacman_install python-isort
pacman_install python-black
## automatic colorscheme generation based on image
pacman_install python-pywal
## connectivity (requirement for calcurse-caldav synchronization)
pacman_install python-httplib2
## python-neovim integration
pacman_install python-neovim
## image processing in python
pacman_install python-pillow
## flask (dependency of my smdv script)
pacman_install python-flask
## login utility for flask:
pacman_install python-flask-login
## websockets (dependency of my smdv script)
pacman_install python-websockets
## sockets
#pacman_install python-websockets
pacman_install flake8
## jedi: linting and more
pacman_install python-jedi
## requests (castero dependency)
pacman_install python-requests
## lxml
pacman_install python-lxml
## pytest (castero dependency)
#pacman_install python-pytest
## cjkwrap (castero dependency)
#pacman_install python-cjkwrap
## coverage (castero dependency)
#pacman_install python-coverage
## beautifulsoup4 (castero dependency)
#pacman_install python-beautifulsoup4
## python mpv (castero dependency)
#yay_install python-mpv
## pylatexenc: latex -> unicode conversion
#yay_install python-pylatexenc
## castero: tui podcast client
#yay_install castero
## jedi: linting and more (newer version than via pacman)
pacman_install python-jedi
## markdown <-> ipynb conversion
#pip3_install notedown
## google cloud apis
#pip3_install google-api-python-client
#pip3_install google-auth-httplib2
#pip3_install google-auth-oauthlib
## smdv: simple markdown viewer
#pip3_install smdv
## run jupyterlab as a systemd service:
systemctl_create jupyterhub
#systemctl_enable jupyterhub
## neovim compatibility
pacman_install python-pynvim
## dunk, a better git-diff (pipe git diff into dunk)
#pip3_install dunk


# Password manager
#-------------------------------------------------------------------------------

pacman_install gnupg # gpg --full-gen-key (generate gpg key)
pacman_install pass # pass init floris.laporte@gmail.com (use gpg key to store passwords securely)
pacman_install pass-otp # otp manager for pass
pacman_install browserpass # host for the pass "browserpass" chromium/firefox extension
pacman_install browserpass-firefox # host for the pass "browserpass" firefox extension
pacman_install browserpass-chromium # host for the pass "browserpass" chromium extension
yay_install passmenu-otp-git # otp menu for pass
#yay_install passff-host  # host for the pass "passFF" firefox extension


# System settings
#-------------------------------------------------------------------------------

## set correct date/time
echo $password | sudo -S timedatectl set-local-rtc 1 >> "$LOG" 2>> "$ERR"
## make sure everyone can mount in /mnt
echo $password | sudo -S chmod a+rwx /mnt >> "$LOG" 2>> "$ERR"
if [ ! -f $HOME/.Xresources ]; then
    # copy preferred theme to ~/.Xresources -> default color scheme
    cp $HOME/.config/Xresources/gruvbox-dark $HOME/.Xresources >> "$LOG" 2>> "$ERR"
    # enable colorscheme
    xrdb $HOME/.Xresources >> "$LOG" 2>> "$ERR"
    # if the custom `xcs` script is in the path,
    # run it to apply colorscheme to currently open windows:
    xcs current >> "$LOG" 2>> "$ERR"
fi
## make sure everyone can create folders in /opt
echo $password | sudo -S chmod a+rwx /opt >> "$LOG" 2>> "$ERR"


# Shells and extensions
#-------------------------------------------------------------------------------

## dash: a minimal implementation of sh:
pacman_install dash
## we'll make sh point to dash in stead to bash
link /usr/bin/dash /bin/sh
## make dash the default shell:
#echo $password | chsh -s /bin/dash 2>> "$LOG" >> "$ERR"

## bash: should already have been installed:
#pacman_install bash
## make bash the default shell:
#echo $password | chsh -s /bin/bash 2>> "$LOG" >> "$ERR"

## fish: alternative shell. It's not posix compliant, but friendly and interactive ;)
#pacman_install fish
## make fish the default shell:
#echo $password | chsh -s /usr/bin/fish 2>> "$LOG" >> "$ERR"

## zsh: another alternative shell. In contrast to fish, it is posix compliant + extras
## it's my preferred shell.
pacman_install zsh
## make zsh the default shell:
echo $password | chsh -s /usr/bin/zsh >> "$LOG" 2>> "$ERR"

## autojump extension for bash/zsh/fish
mkdir -p $HOME/.cache
rm -rf $HOME/.cache/autojump
git clone https://github.com/wting/autojump $HOME/.cache/autojump
cd $HOME/.cache/autojump
python install.py -d $HOME/.config/autojump
sed -i 's|#!/usr/bin/env python|#!/usr/bin/python|' $HOME/.config/autojump/bin/autojump
ln -sf $HOME/.config/autojump/bin/autojump $HOME/.local/bin

## stderred extension for bash/zsh: show stderr messages in red:
rm -rf $HOME/.config/stderred
git clone https://github.com/sickill/stderred $HOME/.config/stderred
cd $HOME/.config/stderred
make

## fish-like autosuggestions for zsh:
rm -rf $HOME/.config/zsh/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-autosuggestions $HOME/.config/zsh/zsh-autosuggestions

## syntax highlighting for zsh:
rm -rf $HOME/.config/zsh/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting $HOME/.config/zsh/zsh-syntax-highlighting

## zsh package manager (i do not really recommend this):
#yay_install oh-my-zsh-git


# Finished
#-------------------------------------------------------------------------------

printf "\n\n\n\n\n"
echo "###############"
echo "## finished! ##"
echo "###############"

