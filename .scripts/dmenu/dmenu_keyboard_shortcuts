#!/usr/bin/python3
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/


import os
import sys
from subprocess import PIPE, CalledProcessError, Popen, call, check_output
from time import sleep


def notify(title, message=""):
    if message:
        check_output(["notify-send", title, message])
    else:
        check_output(["notify-send", title])
    print(title + "\n" + message + "\n")


try:
    import pyautogui
except:
    # notify("pyautogui is not available", "some selected keyboard combinations might not work")
    pyautogui = None


DELIM = "\u2000"  # unicode space

SXHKD_DMENU = (
    {  # lowercase values for how to show these characters in the dmenu [sxhkd -> view]
        "Return": "enter",
        "Print": "prtscn",
        "Up": "",
        "Down": "",
        "Left": "",
        "Right": "",
        "super": "",
        "shift": "",
        "control": "ctrl",
        "equal": "=",
        "minus": "-",
        "period": ".",
        "comma": ",",
        "semicolon": ";",
        "apostrophe": "'",
        "slash": "/",
        "grave": "`",
    }
)

SXHKD_PYAUTOGUI = {  # pyautogui codes for these characters [sxhkd -> pyautogui]
    "Return": "enter",
    "Print": "prtscr",
    "Up": "up",
    "Down": "down",
    "Left": "left",
    "Right": "right",
    "super": "apps",
    "shift": "shift",
    "control": "ctrl",
    "equal": "=",
    "minus": "-",
    "period": ".",
    "comma": ",",
    "semicolon": ";",
    "apostrophe": "'",
    "slash": "/",
    "grave": "`",
}


def dmenu(list_in, prompt=" "):
    dmenu_in = Popen(["echo", "\n".join(str(x) for x in list_in)], stdout=PIPE).stdout
    prompt = [] if not prompt else ["-p", prompt]
    try:
        choice = check_output(
            ["dmenu"] + prompt + sys.argv[2:], stdin=dmenu_in
        ).decode()[:-1]
        return choice
    except CalledProcessError:
        pass


class Shortcut:
    def __init__(self, keys, description, command):
        global max_key_length, shortcuts
        self.keys = self.parse_keys(keys)
        if len(self.keys) > max_key_length:
            max_key_length = len(self.keys)
        self.description = description.replace("#", "").strip()
        self.command = command.strip().replace("~", os.environ.get("HOME"))

    def __call__(self):
        if pyautogui and not self.keys.startswith("*"):
            self.call_with_pyautogui()
        else:
            self.call_without_pyautogui()

    @staticmethod
    def parse_keys(keys):
        abc = "abcdefghikjlmnopqrstuvwxyz"
        for k, v in SXHKD_DMENU.items():
            if k != k.lower():
                keys = keys.replace(k, v.lower())
        keys = keys.strip()
        if "XF86" in keys:
            keys = keys.replace("XF86", "*").lower()
        for i in range(12):
            if f"F{i}" in keys:
                keys = keys.lower()
        for x, X in zip(abc, abc.upper()):
            keys = keys.replace(X, f"shift + {x}")
        for k, v in SXHKD_DMENU.items():
            if k == k.lower():
                keys = keys.replace(k, v.lower())
        return keys

    def call_without_pyautogui(self):
        commands = self.command.split(";")
        outputs = []
        for command in commands:
            for k, v in os.environ.items():
                command = command.replace("$" + k, v)
            # TODO: find a good way to split this string, so that we don't have to use
            #       the shell=True flag.
            call(command, shell=True)
        if len(outputs) == 1:
            return outputs[0]
        return outputs

    def call_with_pyautogui(self):
        keys = self.keys
        for k, v in SXHKD_PYAUTOGUI.items():
            keys = keys.replace(SXHKD_DMENU[k].lower(), v)
        keys = [key.strip() for key in keys.split("+")]
        pyautogui.press("apps")  # needed to 'wake' pytautogui somehow
        pyautogui.hotkey(*keys)

    def __str__(self):
        padding = " " * (max_key_length + 1 - len(self.keys))
        return f"{self.keys}{DELIM}{padding}{self.description}"


if __name__ == "__main__":
    max_key_length = 0
    with open(os.path.expanduser(f"~/.config/sxhkd/sxhkdrc")) as file:
        lines = file.read().splitlines()

    shortcuts = {}
    for i, line in enumerate(lines):
        if (
            line.strip() != ""
            and not line.startswith("\t")
            and not line.startswith(" ")
            and not line.startswith("#")
        ):
            # if no description, do not offer it as an option
            description = lines[i - 1].strip()
            if not description.startswith("#"):
                continue

            # else create a shortcut reference
            shortcut = Shortcut(
                keys=line, description=lines[i - 1], command=lines[i + 1]
            )

            shortcuts[shortcut.keys] = shortcut

    chosen = dmenu(shortcuts.values())

    if chosen is None:
        exit(0)

    shortcut = shortcuts[chosen.split(DELIM)[0]]

    output = shortcut()
