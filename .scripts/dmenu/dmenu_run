#!/usr/bin/python3
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/
#
"""
    Open executable; if executable is not found open it in default browser.
"""

import os

# imports
import re
import sys
from subprocess import PIPE, CalledProcessError, Popen, call, check_output

# constants
TERMINAL = os.environ.get("TERMINAL")
BROWSER = os.environ.get("BROWSER")
OPEN_IN_TERMINAL = ["vifm", "vim"]
DMENU_PATH = check_output(["dmenu_path"]).decode().splitlines()
DMENU_HISTORY_PATH = os.path.expanduser("~/.scripts/dmenu/dmenu_run.history")
DESKTOP_FILE_PATHS = [
    "~/.local/share/applications/",
    "/usr/share/applications/",
]
CURRENT_DIRECTORY = (
    check_output(["find", ".", "-mount", "-maxdepth", "2"]).decode().splitlines()
)
CLEAR_HISTORY = False


# functions
def get_selection():
    try:
        return check_output(["xclip", "-o"]).decode().replace("\n", " ")
    except CalledProcessError:
        return ""


def get_clipboard():
    try:
        return (
            check_output(["xclip", "-selection", "clipboard", "-o"])
            .decode()
            .replace("\n", " ")
        )
    except CalledProcessError:
        return ""


def crop_line(line, length=35):
    if len(line) < length:
        return line
    return f"{line[:length-3].strip()}..."


def dmenu(list_in, prompt="ïŒ³ "):
    dict_in = {crop_line(line): line for line in list_in if "\0" not in line}
    dmenu_in = Popen(["echo", "\n".join(dict_in.keys())], stdout=PIPE).stdout
    prompt = [] if not prompt else ["-p", prompt]
    command = ["dmenu"] + prompt + sys.argv[1:]
    try:
        choice = check_output(command, stdin=dmenu_in).decode().replace("\n", " ")
    except CalledProcessError:
        choice = ""
    choice = dict_in.get(choice, choice)
    if "*" in choice:
        choice = choice.replace(" * ", f" {get_selection()} ")
    if "+" in choice:
        choice = choice.replace(" + ", f" {get_clipboard()} ")
    choice = choice.replace("\n", "").replace("\t", "")
    while "  " in choice:
        choice = choice.replace("  ", " ")
    while choice.endswith(" "):
        choice = choice[:-1]
    return choice


def open_desktop_file(args):
    desktop_filename = args[0][:-1]
    for path in DESKTOP_FILE_PATHS:
        path = os.path.abspath(os.path.expanduser(path))
        if not desktop_filename + ".desktop" in os.listdir(path):
            continue
        with open(os.path.join(path, desktop_filename + ".desktop"), "r") as file:
            for line in file:
                if not line.startswith("Exec"):
                    continue
                cmd = re.sub("%.*$", "", line[5:].strip())
                return Popen(cmd, shell=True)


def list_desktop_files():
    applications = []
    for path in DESKTOP_FILE_PATHS:
        path = os.path.abspath(os.path.expanduser(path))
        applications += [
            f"{app[:-8]}*" for app in os.listdir(path) if app.endswith(".desktop")
        ]
    return applications


# main script
if __name__ == "__main__":
    with open(DMENU_HISTORY_PATH, "a") as file:
        pass  # create file if it does not exist
    with open(DMENU_HISTORY_PATH, "r") as file:
        dmenu_history = file.read().splitlines()

    DESKTOP_FILES = list_desktop_files()

    dmenu_commands = list(
        {
            k: None
            for k in (
                list({k: None for k in dmenu_history[::-1]})  # history
                + OPEN_IN_TERMINAL
                + [BROWSER]
                + DMENU_PATH
                + DESKTOP_FILES
                + CURRENT_DIRECTORY
                + ["[clear history]"]
            )
        }
    )

    choice = dmenu(dmenu_commands)

    if not choice:
        exit(0)

    choice = choice.split(" ")
    if " ".join(choice) == "[clear history]":
        CLEAR_HISTORY = True
    elif choice[0] in OPEN_IN_TERMINAL:
        Popen([TERMINAL, "-e"] + choice)
    elif choice[0] in DESKTOP_FILES:
        open_desktop_file(choice)
    else:
        try:
            Popen(choice)
        except (FileNotFoundError, PermissionError):
            if any(
                choice[0].startswith(prefix)
                for prefix in ("http://", "https://", "file:///")
            ):
                Popen([BROWSER, "%20".join(choice)])
            elif os.path.isdir(" ".join(choice)):
                directory = " ".join(choice)
                os.chdir(directory)
                Popen([TERMINAL])
            elif os.path.exists(" ".join(choice)):
                Popen(["xdg-open", f"{' '.join(choice)}"])
            else:
                duckduckgo_query = f"https://duckduckgo.com/?q={'+'.join(choice)}"
                Popen([BROWSER, duckduckgo_query])
                exit(1)  # command given does not exist, it's also not a valid url

    with open(DMENU_HISTORY_PATH, "a") as file:
        file.write(f"{' '.join(choice)}\n")

    if CLEAR_HISTORY:
        os.remove(DMENU_HISTORY_PATH)
